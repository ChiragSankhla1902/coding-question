class Solution
{
    public:
    struct Node* reverse(struct Node* head)
    {
        struct Node* cur=head;
        struct Node* nxt; struct Node* prev=NULL;
        while(cur!=NULL){
            nxt=cur->next;
            cur->next=prev;
            prev=cur;
            cur=nxt;
        }
        return prev;
    }
    
    struct Node* addition(struct Node* head1,struct Node* head2)
    {
        int carry=0,sum=0;
        struct Node* temp;
        struct Node* temp1=head1;
        struct Node* temp2=head2;
        while(temp1!=NULL&&temp2!=NULL){
            sum=temp1->data+temp2->data+carry;
            carry=(sum>9)?sum/10:0;
            temp2->data=sum%10;
            temp1->data=sum%10;
            temp1=temp1->next;
            temp=temp2;
            temp2=temp2->next;
        }
        if(temp1!=NULL){
            while(temp1!=NULL){
                sum = temp1->data+carry;
                carry=(sum>9)?sum/10:0;
                temp1->data=sum%10;
                temp=temp1;
                temp1=temp1->next;
            }
            if(carry>0){
                temp->next=new Node (carry);
            }
            return head1;
        }
        else{
            while(temp2!=NULL){
                sum = temp2->data+carry;
                carry=(sum>9)?sum/10:0;
                temp2->data=sum%10;
                temp=temp2;
                temp2=temp2->next;
            }
            if(carry>0){
                temp->next=new Node (carry);
            }
            return head2;
            
        }
        

        
        
    }
    
    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        first=reverse(first);
        second =reverse(second);
        first=addition(first,second);
        first=reverse(first);
        return first;
    }
};
